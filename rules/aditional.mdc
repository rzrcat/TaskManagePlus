---
description: 
globs: 
alwaysApply: true
---
## 개발 일지 자동 기록 원칙

- 개발자가 "개발 종료"를 명시적으로 지시하거나, 하루(24시간)가 지나면  
  **그날 작업한 모든 내역을 자동으로 노션(Notion)에 기록**한다.

- 기록 대상 페이지:

  - **개발기록**: 상세 작업 내역, 주요 이슈, 해결 과정, 리팩토링/구조 변경 등 구체적 개발 히스토리
  - **개발진행현황**: 전체 진행률, 완료/진행/대기 중인 주요 작업, 남은 과제 등 현황 요약

- 기록 방식:

  1. 자동으로 작업 내역을 정리하여 각 페이지에 맞는 형식으로 업로드한다.
  2. 기록 시점, 작업자, 주요 변경점, 자동화/수동 작업 여부, 특이사항 등을 명확히 남긴다.
  3. 기록이 완료되면 개발자에게 요약 결과를 안내한다.

- 개발 일지 자동 기록은 프로젝트 투명성, 협업, 회고, 이슈 추적을 위해 필수적으로 수행한다.

- 새로운 기능 개발 또는 리팩토링 시,  
  **기획서(요구사항 문서)를 참고하여 현재 프로젝트 상태를 점검**하고  
  **기능 명세 목록을 자동으로 업데이트**한다.

- 기능 명세 목록은 다음과 같이 관리한다:

  1. **기획서와 실제 코드/구조를 비교**하여 누락된 기능, 미완성/진행 중 기능, 완료된 기능을 자동으로 
  식별한다.
  2. 기능별로 상태(완료/진행중/대기/미정), 담당자, 예상 일정, 관련 이슈 등을 기록한다.
  3. 모든 변경/추가/완료 내역은 **기능 명세 목록 페이지**에 자동으로 기록한다.

- 기능 명세 목록 페이지에는 다음 정보가 포함되어야 한다:

  - 기능명, 설명, 상태, 담당자, 일정, 관련 이슈/PR, 참고 기획서 링크 등

- 기능 명세 목록은 항상 최신 상태로 유지하며,  
  **기능 개발/변경/완료 시 자동으로 반영**한다.

- 기록 및 업데이트가 완료되면 개발자에게 요약 결과를 안내한다.

## 19. 플랫폼(OS)별 개발 환경 호환성 원칙

- macOS, Windows, Linux 등 다양한 OS에서 동일하게 동작하는 코드/구조를 유지한다.
- import 경로는 항상 소문자, 확장자 생략, 대소문자 혼용 금지(Windows는 구분X, macOS/Linux는 
구분O)
- node_modules, 패키지 import, 타입 선언 등은 cross-platform 호환성을 고려해 작성한다.
- require() 대신 ESM import 사용, 경로 구분자는 path.join 등 cross-platform 방식 적용
- npm/yarn/pnpm 스크립트는 OS별 실행 환경 차이를 고려해 작성한다.
- .env, 권한, 실행 파일 등 OS별 차이 발생 시 컨벤션/문서에 명확히 안내한다.
- 빌드/테스트/배포는 모든 OS에서 동일하게 통과해야 하며, 환경별 이슈 발생 시 즉시 컨벤션에 반영한다.

### [실전 체크리스트 및 권장 설정]

- **Node.js/NPM 버전 통일**: nvm(macOS), nvm-windows(Windows) 등으로 Node.js, npm 
버전을 맞추고, package-lock.json을 항상 커밋/동기화한다.
- **import 경로/파일명 대소문자 일치**: 실제 파일명과 100% 일치하도록 작성하고, CI에서 대소문자 경로 
체크(lint, test) 필수.
- **.env 파일**: UTF-8로 저장, macOS는 chmod로 권한 관리, Windows는 속성 변경. 경로는 항상 
상대경로/소문자 사용.
- **Git 라인 엔딩(CRLF/LF) 통일**: .gitattributes에 `* text=auto` 또는 `* text eol=lf` 
명시, 에디터/IDE에서 LF로 통일 권장.
- **cross-env 등 cross-platform 스크립트 사용**: npm script에서 환경변수 등은 cross-env로 
통일, 쉘 스크립트는 node.js로 대체 권장.
- **경로 구분자**: 코드에서 경로는 `/` 사용, node.js의 path.join 등 cross-platform 함수 사용.
- **실행 파일/권한**: macOS는 실행 권한 필요, Windows는 필요 없음. git에서 권한 비트 관리 주의.
- **node_modules/바이너리**: OS별로 바이너리가 다를 수 있으니, 항상 npm install로 재설치.

> 위 체크리스트를 모든 개발자가 숙지하고, 실제로 OS를 오가며 작업할 때 발생할 수 있는 문제를 사전에 
예방하세요.


