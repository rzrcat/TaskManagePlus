---
description: 
globs: 
alwaysApply: true
---
# 품질 관리 및 QA 규칙 (테스트/자동화/코드리뷰/체크리스트)

> 이 문서는 "품질 관리/QA/테스트/자동화/코드리뷰/체크리스트"만을 다룹니다.
> 공용 컨벤션/구조/패턴/설계 등은 core.mdc, 프로젝트 특화 정보/메모리뱅크 관리는 memory-bank.mdc를 참고하세요.
- 코드린트, PR, QA 시에도 본 컨벤션 준수 여부를 항상 체크한다.

## 1. 클린코드/자동화/품질 기준

- 명확하고 일관된 네이밍, 함수/클래스의 단일 책임 원칙, 중복 최소화, 불필요한 주석/코드 제거, 적절한 예외 처리 및 오류 관리, 테스트 가능한 구조, 코드의 의도를 코드 자체로 표현
- 코드 린트/포맷팅(ESLint, Prettier 등), 테스트 커버리지(80%+), 코드 리뷰/PR, 정적 분석 도구, 의존성/취약점 관리, 문서화 수준, CI/CD 자동화, 이슈/태스크 관리, 회고/피드백 기록, 버전/릴리즈 관리
- 태스크 템플릿에 품질 체크리스트 추가 권장

## 2. 테스트

- 단위 테스트: 모든 주요 기능/컴포넌트 필수 (`*.test.tsx`)
- 통합 테스트: 사용자 시나리오 기반 (예: 문의 작성 → 답변 확인)
- 도구: Jest + React Testing Library + MSW (API Mocking)
- 커버리지: 80%+ 목표 (branches/lines/functions)
- 테스트 파일은 `__tests__` 폴더에 위치

## 3. 코드 리뷰 & Git Workflow

- 브랜치 전략: GitHub Flow (main → feature/xxx → PR)
- 커밋 메시지: Conventional Commits 규칙
- PR 전 체크리스트:
  1. `npm run lint` (ESLint)
  2. `npm run test` (테스트)
  3. `npm run build` (빌드)
- 모든 주요 변경은 PR로 제출, 1인 이상 리뷰 필수

## 4. 문서화

- Storybook: 모든 UI 컴포넌트 문서화
- JSDoc: 복잡한 함수/훅에 설명 추가

## 5. CI/CD

- GitHub Actions: PR 시 lint/test 자동 실행
- 배포: Vercel/Netlify (프론트엔드), Supabase (백엔드)
- 모니터링: Sentry (에러 추적), UptimeRobot (다운타임 알림)

## 파일 구조/이동/삭제 관련 품질 관리 및 자동화 체크리스트

- 파일 이동/삭제/구조 변경 시 반드시 다음을 점검:
  - 전체 import/require/참조 경로 자동 점검 및 일괄 수정
  - 변경 이력(커밋/PR/개발 일지) 명확히 기록
  - 구조 변경 후 코드 린트/테스트 자동화 실행
  - 자동화 스크립트 실행 전후 검증 절차 및 회고 기록
  - PR/QA 시 구조 변경 이력 및 품질 체크리스트 확인
- 자동화 스크립트 작성/운영 시:
  - 구조 변경 자동화 스크립트 작성 가이드 준수
  - 스크립트 실행 후 검증/회고 절차 필수

## 6. 클린코드 실천 보강 규칙 (Cursor AI 전용)

- 함수/클래스/모듈은 반드시 "한 가지 일만" 하도록 작성 (SRP, 단일 책임 원칙)
- 네이밍은 "존재 이유/의도/사용법"이 명확히 드러나도록 작성 (불명확/중복/임시/인코딩 네이밍 금지)
- 함수는 20줄 이내, 들여쓰기 2단 이하, 파라미터 2개 이하를 원칙으로 하며, 초과 시 반드시 분리/리팩토링
- 중복 코드/로직 발견 시 즉시 함수/모듈로 추출, 불필요한 임시 변수/사용하지 않는 코드/주석 즉시 제거
- 주석은 코드로 의도를 표현할 수 없는 경우에만 작성, 반드시 최신 상태 유지 (나쁜 주석 금지)
- 명령과 조회(변경과 반환)는 반드시 분리 (Command-Query Separation)
- 리팩토링/정리/테스트/문서화는 "나중"이 아닌 "즉시" 수행 (캠핑장 원칙)

## 7. 클린코드 실천 보강 규칙 (고급)

- 예외는 의미 있는 메시지와 함께 throw, catch 시 원인(원본 예외) 보존, 오류 발생 후 시스템/객체의 일관성 유지
- 외부 시스템/라이브러리와의 경계는 래퍼/어댑터/Mock 등으로 분리, 직접 결합 금지
- 모든 주요 로직/컴포넌트는 단위 테스트 필수, 테스트는 자동화/독립적/명확한 네이밍으로 작성
- 클래스는 작고 단일 책임만, public 최소화, 내부 구현은 캡슐화/정보 은닉
- DI/IoC 등으로 시스템 유연성/테스트 용이성 확보, 환경설정/비즈니스 로직 분리
- 중복/복잡도/긴 함수·클래스/불명확 네이밍/주석 남발/데이터 뭉치/순환 의존성 등 코드 스멜 발견 시 즉시 리팩토링
- 동시성 이슈는 불변 객체/락/큐 등 안전한 패턴 사용, 동시성 관련 부분은 명확히 문서화
- 날짜/시간은 표준 라이브러리만 사용, 타임존/포맷/불변성 일관성 유지
- 코드/설계 개선은 작은 단위로 반복, 개선 내역은 반드시 기록(커밋/PR/일지 등)
